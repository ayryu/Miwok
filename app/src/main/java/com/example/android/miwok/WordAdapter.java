package com.example.android.miwok;

import android.app.Activity;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;

/**
By default, ArrayAdapter expects that the provided resource id references only a single TextView
 So we build a custom adapter class that extends the generic ArrayAdapter class to accommodate for multiple Views
 In order to display more complicated list items than a TextView, we have to override and provide our own implementation
 of a getView() method.
 */

/**
 * ListView originally invoked the ArrayAdapter's getView() method when the ListView needed a new View to appear on the screen.
 * Because the getView() method can only accept a single TextView as a parameter, we override it to get the functionality we want.
 * To override, use keyboard shortcut Ctl + O to show the available methods to override from the ArrayAdapter class. Find getView method and click OK. The getView() method gets generated by default.
 * Or click the space between the curly braces of the class, go to the code tab and choose Override Methods. Find getView method and click OK. The getView() method gets generated by default.
 */
public class WordAdapter extends ArrayAdapter<Word> {

    //Resource ID for the background colour for this list of words
    private int mColorResourceId;

    public WordAdapter(Activity context, ArrayList<Word> words, int colorResourceId) {
        // Here, we initialize the ArrayAdapter's internal storage for the context and the list.
        // the second argument is used when the ArrayAdapter is populating a single TextView.
        // Because this is a custom adapter for two TextViews and an ImageView, the adapter is not
        // going to use this second argument, so it can be any value. Here, we used 0.
        super(context, 0, words);
        mColorResourceId = colorResourceId;
    }

    /**
     * The getView method gets called when the ListView is trying to display a list of items at a given position
     * The ListView will pass in a POTENTIAL view that we could reuse.
     *
     * The parameter convertView is an existing View that we can reuse.
     * When convertView == null, that means there is no View that we can reuse.
     * This situation is common when you first open up an Activity, and you're creating items in the list for the first time to fill up the screen.
     *
     * The parameter known as parent refers to the parent ViewGroup for the all items, which is the ListView itself.
     */
    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
        // Check if the existing view is being reused, otherwise inflate the view
        View listItemView = convertView;
        if(listItemView == null) {
            listItemView = LayoutInflater.from(getContext()).inflate(
                    R.layout.list_item, parent, false);
        }

        // Get the {@link Word} object located at this position in the list
        Word currentWord = getItem(position);

        // Find the TextView in the list_item.xml layout with the ID version_name
        TextView miwokTextView = (TextView) listItemView.findViewById(R.id.miwok_text_view);
        // Get the Miwok translation from the currentWord object and
        // set this text on the Miwok TextView
        miwokTextView.setText(currentWord.getMiwokTranslation());

        // Find the TextView in the list_item.xml layout with the ID version_number
        TextView defaultTextView = (TextView) listItemView.findViewById(R.id.default_text_view);
        // Get the default translation from the currentWord object and
        // set this text on the default TextView
        defaultTextView.setText(currentWord.getDefaultTranslation());

        //Find the ImageView in the list_item.xml layout with the ID image.
        ImageView imageView = (ImageView) listItemView.findViewById(R.id.image);

        if(currentWord.hasImage()) {
            //Set the ImageView to the image resource specified in the current Word
            imageView.setImageResource(currentWord.getImageResourceID());

            //Since Views get reused, instead of assuming that the reused View set the visibility, we invoke this method.
            imageView.setVisibility(View.VISIBLE);
        }
        else{
            //Otherwise hides the ImageView (set visibility to GONE)
            imageView.setVisibility(View.GONE);
        }

        //Set the theme colour for the list item
        View textContainer = listItemView.findViewById(R.id.text_container);
        //Find the colour that the resource ID maps to
        int colour = ContextCompat.getColor(getContext(), mColorResourceId);
        //Set the background colour of the text container view
        textContainer.setBackgroundColor(colour);

        // Return the whole list item layout (containing 2 TextViews and an ImageView)
        // so that it can be shown in the ListView
        return listItemView;
    }
}
